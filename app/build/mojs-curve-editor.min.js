!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("mojs-curve-editor",[],e):"object"==typeof exports?exports["mojs-curve-editor"]=e():t["mojs-curve-editor"]=e()}(this,function(){return function(t){function e(t){var e=document.getElementsByTagName("head")[0],n=document.createElement("script");n.type="text/javascript",n.charset="utf-8",n.src=p.p+""+t+".hot-update.js",e.appendChild(n)}function n(t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var e=new XMLHttpRequest,n=p.p+""+b+".hot-update.json";e.open("GET",n,!0),e.timeout=1e4,e.send(null)}catch(r){return t(r)}e.onreadystatechange=function(){if(4===e.readyState)if(0===e.status)t(new Error("Manifest request to "+n+" timed out."));else if(404===e.status)t();else if(200!==e.status&&304!==e.status)t(new Error("Manifest request to "+n+" failed."));else{try{var r=JSON.parse(e.responseText)}catch(i){return void t(i)}t(null,r)}}}function r(t){function e(t,e){"ready"===w&&o("prepare"),S++,p.e(t,function(){function n(){S--,"prepare"===w&&(j[t]||c(t),0===S&&0===O&&f())}try{e.call(null,r)}finally{n()}})}var n=N[t];if(!n)return p;var r=function(e){return n.hot.active?N[e]?(N[e].parents.indexOf(t)<0&&N[e].parents.push(t),n.children.indexOf(e)<0&&n.children.push(e)):T=[t]:(console.warn("[HMR] unexpected require("+e+") from disposed module "+t),T=[]),p(e)};for(var i in p)Object.prototype.hasOwnProperty.call(p,i)&&(h?Object.defineProperty(r,i,function(t){return{configurable:!0,enumerable:!0,get:function(){return p[t]},set:function(e){p[t]=e}}}(i)):r[i]=p[i]);return h?Object.defineProperty(r,"e",{enumerable:!0,value:e}):r.e=e,r}function i(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],active:!0,accept:function(t,n){if("undefined"==typeof t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var r=0;r<t.length;r++)e._acceptedDependencies[t[r]]=n;else e._acceptedDependencies[t]=n},decline:function(t){if("undefined"==typeof t)e._selfDeclined=!0;else if("number"==typeof t)e._declinedDependencies[t]=!0;else for(var n=0;n<t.length;n++)e._declinedDependencies[t[n]]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=e._disposeHandlers.indexOf(t);n>=0&&e._disposeHandlers.splice(n,1)},check:a,apply:l,status:function(t){return t?void E.push(t):w},addStatusHandler:function(t){E.push(t)},removeStatusHandler:function(t){var e=E.indexOf(t);e>=0&&E.splice(e,1)},data:x[t]};return e}function o(t){w=t;for(var e=0;e<E.length;e++)E[e].call(null,t)}function u(t){var e=+t+""===t;return e?+t:t}function a(t,e){if("idle"!==w)throw new Error("check() is only allowed in idle status");"function"==typeof t?(_=!1,e=t):(_=t,e=e||function(t){if(t)throw t}),o("check"),n(function(t,n){if(t)return e(t);if(!n)return o("idle"),void e(null,null);A={},P={},j={};for(var r=0;r<n.c.length;r++)P[n.c[r]]=!0;g=n.h,o("prepare"),y=e,m={};var i=0;c(i),"prepare"===w&&0===S&&0===O&&f()})}function s(t,e){if(P[t]&&A[t]){A[t]=!1;for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(m[n]=e[n]);0===--O&&0===S&&f()}}function c(t){P[t]?(A[t]=!0,O++,e(t)):j[t]=!0}function f(){o("ready");var t=y;if(y=null,t)if(_)l(_,t);else{var e=[];for(var n in m)Object.prototype.hasOwnProperty.call(m,n)&&e.push(u(n));t(null,e)}}function l(e,n){function r(t){for(var e=[t],n={},r=e.slice();r.length>0;){var o=r.pop(),t=N[o];if(t&&!t.hot._selfAccepted){if(t.hot._selfDeclined)return new Error("Aborted because of self decline: "+o);if(0===o)return;for(var u=0;u<t.parents.length;u++){var a=t.parents[u],s=N[a];if(s.hot._declinedDependencies[o])return new Error("Aborted because of declined dependency: "+o+" in "+a);e.indexOf(a)>=0||(s.hot._acceptedDependencies[o]?(n[a]||(n[a]=[]),i(n[a],[o])):(delete n[a],e.push(a),r.push(a)))}}}return[e,n]}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];t.indexOf(r)<0&&t.push(r)}}if("ready"!==w)throw new Error("apply() is only allowed in ready status");"function"==typeof e?(n=e,e={}):e&&"object"==typeof e?n=n||function(t){if(t)throw t}:(e={},n=n||function(t){if(t)throw t});var a={},s=[],c={};for(var f in m)if(Object.prototype.hasOwnProperty.call(m,f)){var l=u(f),d=r(l);if(!d){if(e.ignoreUnaccepted)continue;return o("abort"),n(new Error("Aborted because "+l+" is not accepted"))}if(d instanceof Error)return o("abort"),n(d);c[l]=m[l],i(s,d[0]);for(var l in d[1])Object.prototype.hasOwnProperty.call(d[1],l)&&(a[l]||(a[l]=[]),i(a[l],d[1][l]))}for(var h=[],v=0;v<s.length;v++){var l=s[v];N[l]&&N[l].hot._selfAccepted&&h.push({module:l,errorHandler:N[l].hot._selfAccepted})}o("dispose");for(var y=s.slice();y.length>0;){var l=y.pop(),_=N[l];if(_){for(var E={},O=_.hot._disposeHandlers,S=0;S<O.length;S++){var j=O[S];j(E)}x[l]=E,_.hot.active=!1,delete N[l];for(var S=0;S<_.children.length;S++){var A=N[_.children[S]];if(A){var P=A.parents.indexOf(l);P>=0&&A.parents.splice(P,1)}}}}for(var l in a)if(Object.prototype.hasOwnProperty.call(a,l))for(var _=N[l],M=a[l],S=0;S<M.length;S++){var C=M[S],P=_.children.indexOf(C);P>=0&&_.children.splice(P,1)}o("apply"),b=g;for(var l in c)Object.prototype.hasOwnProperty.call(c,l)&&(t[l]=c[l]);var I=null;for(var l in a)if(Object.prototype.hasOwnProperty.call(a,l)){for(var _=N[l],M=a[l],R=[],v=0;v<M.length;v++){var C=M[v],j=_.hot._acceptedDependencies[C];R.indexOf(j)>=0||R.push(j)}for(var v=0;v<R.length;v++){var j=R[v];try{j(a)}catch(k){I||(I=k)}}}for(var v=0;v<h.length;v++){var D=h[v],l=D.module;T=[l];try{p(l)}catch(k){if("function"==typeof D.errorHandler)try{D.errorHandler(k)}catch(k){I||(I=k)}else I||(I=k)}}return I?(o("fail"),n(I)):(o("idle"),void n(null,s))}function p(e){if(N[e])return N[e].exports;var n=N[e]={exports:{},id:e,loaded:!1,hot:i(e),parents:T,children:[]};return t[e].call(n.exports,n,n.exports,r(e)),n.loaded=!0,n.exports}var d=this.webpackHotUpdatemojs_curve_editor;this.webpackHotUpdatemojs_curve_editor=function(t,e){s(t,e),d&&d(t,e)};var h=!1;try{Object.defineProperty({},"x",{get:function(){}}),h=!0}catch(v){}var y,m,g,_=!0,b="da201b1f9ab819915c67",x={},T=[],E=[],w="idle",O=0,S=0,j={},A={},P={},N={};return p.m=t,p.c=N,p.p="build/",p.h=function(){return b},r(0)(0)}([function(t,e,n){t.exports=n(1)},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}var i=n(2),o=n(5),u=r(o),a=n(92),s=r(a);n(137),document.addEventListener("DOMContentLoaded",function(){(0,i.render)((0,i.h)(u["default"],{state:s["default"].getState()}),document.body)})},function(t,e,n){(function(t){!function(t,n){n(e)}(this,function(t){function e(t,e,n){this.nodeName=t,this.attributes=e,this.children=n,this.key=e&&e.key}function n(t,e){if(e)for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}function r(t){return n({},t)}function i(t,e){for(var n=e.split("."),r=0;r<n.length&&t;r++)t=t[n[r]];return t}function o(t,e){return[].slice.call(t,e)}function u(t){return"function"==typeof t}function a(t){return"string"==typeof t}function s(t){return void 0===t||null===t}function c(t){return t===!1||s(t)}function f(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}function l(t,n,r){var i,o,s,p=arguments.length;if(p>2){var d=typeof r;if(3===p&&"object"!==d&&"function"!==d)c(r)||(i=[String(r)]);else{i=[];for(var h=2;h<p;h++){var v=arguments[h];if(!c(v)){v.join?o=v:(o=Q)[0]=v;for(var y=0;y<o.length;y++){var m=o[y],g=!(c(m)||u(m)||m instanceof e);g&&!a(m)&&(m=String(m)),g&&s?i[i.length-1]+=m:c(m)||(i.push(m),s=g)}}}}}else if(n&&n.children)return l(t,n,n.children);n&&(n.children&&delete n.children,u(t)||("className"in n&&(n["class"]=n.className,delete n.className),s=n["class"],s&&!a(s)&&(n["class"]=f(s))));var _=new e(t,n||void 0,i);return K.vnode&&K.vnode(_),_}function p(t,e){return l(t.nodeName,n(r(t.attributes),e),arguments.length>2?o(arguments,2):t.children)}function d(t,e,n){var r=e.split("."),o=r[0];return function(e){var c,f,l,p=e&&e.currentTarget||this,d=t.state,h=d;if(a(n)?(f=i(e,n),s(f)&&(p=p._component)&&(f=i(p,n))):f=p.nodeName?(p.nodeName+p.type).match(/^input(check|rad)/i)?p.checked:p.value:e,u(f)&&(f=f.call(p)),r.length>1){for(l=0;l<r.length-1;l++)h=h[r[l]]||(h[r[l]]={});h[r[l]]=f,f=d[o]}t.setState((c={},c[o]=f,c))}}function h(t){1===nt.push(t)&&(K.debounceRendering||Z)(v)}function v(){if(nt.length){var t,e=nt;for(nt=rt,rt=e;t=e.pop();)t._dirty&&q(t)}}function y(t){var e=t&&t.nodeName;return e&&u(e)&&!(e.prototype&&e.prototype.render)}function m(t,e){return t.nodeName(j(t),e||$)}function g(t,e){return t[tt]||(t[tt]=e||{})}function _(t){return t instanceof Text?3:t instanceof Element?1:0}function b(t){var e=t.parentNode;e&&e.removeChild(t)}function x(t,e,n,r,i){if(g(t)[e]=n,"key"!==e&&"children"!==e)if("class"!==e||i)if("style"===e){if((!n||a(n)||a(r))&&(t.style.cssText=n||""),n&&"object"==typeof n){if(!a(r))for(var o in r)o in n||(t.style[o]="");for(var o in n)t.style[o]="number"!=typeof n[o]||et[o]?n[o]:n[o]+"px"}}else if("dangerouslySetInnerHTML"===e)n&&(t.innerHTML=n.__html);else if("o"===e[0]&&"n"===e[1]){var f=t._listeners||(t._listeners={});e=G(e.substring(2)),n?f[e]||t.addEventListener(e,E):f[e]&&t.removeEventListener(e,E),f[e]=n}else if("type"!==e&&!i&&e in t)T(t,e,s(n)?"":n),c(n)&&t.removeAttribute(e);else{var l=i&&e.match(/^xlink\:?(.+)/);c(n)?l?t.removeAttributeNS("http://www.w3.org/1999/xlink",G(l[1])):t.removeAttribute(e):"object"==typeof n||u(n)||(l?t.setAttributeNS("http://www.w3.org/1999/xlink",G(l[1]),n):t.setAttribute(e,n))}else t.className=n||""}function T(t,e,n){try{t[e]=n}catch(r){}}function E(t){return this._listeners[t.type](K.event&&K.event(t)||t)}function w(t){for(var e={},n=t.attributes.length;n--;)e[t.attributes[n].name]=t.attributes[n].value;return e}function O(t,e){return a(e)?3===_(t):a(e.nodeName)?S(t,e.nodeName):u(e.nodeName)?t._componentConstructor===e.nodeName||y(e):void 0}function S(t,e){return t.normalizedNodeName===e||G(t.nodeName)===G(e)}function j(t){var e=t.nodeName.defaultProps,i=r(e||t.attributes);return e&&n(i,t.attributes),t.children&&(i.children=t.children),i}function A(t){N(t);var e=G(t.nodeName),n=it[e];n?n.push(t):it[e]=[t]}function P(t,e){var n=G(t),r=it[n]&&it[n].pop()||(e?document.createElementNS("http://www.w3.org/2000/svg",t):document.createElement(t));return g(r),r.normalizedNodeName=n,r}function N(t){b(t),1===_(t)&&(g(t,w(t)),t._component=t._componentConstructor=null)}function M(){for(var t;t=ot.pop();)t.componentDidMount&&t.componentDidMount()}function C(t,e,n,r,i){ut++;var o=I(t,e,n,r);return i&&o.parentNode!==i&&i.appendChild(o),--ut||M(),o}function I(t,e,n,r){for(var i=e&&e.attributes;y(e);)e=m(e,n);if(s(e))return document.createComment("");if(a(e)){if(t){if(3===_(t)&&t.parentNode)return t.nodeValue!=e&&(t.nodeValue=e),t;A(t)}return document.createTextNode(e)}var o,c=t,f=e.nodeName;if(u(f))return Y(t,e,n,r);if(a(f)||(f=String(f)),o="svg"===G(f),o&&(at=!0),t){if(!S(t,f)){for(c=P(f,at);t.firstChild;)c.appendChild(t.firstChild);D(t)}}else c=P(f,at);return e.children&&1===e.children.length&&"string"==typeof e.children[0]&&1===c.childNodes.length&&c.firstChild instanceof Text?c.firstChild.nodeValue=e.children[0]:(e.children||c.firstChild)&&R(c,e.children,n,r),U(c,e.attributes),i&&i.ref&&(c[tt].ref=i.ref)(c),o&&(at=!1),c}function R(t,e,n,r){var i,o,u,a,c=t.childNodes,f=[],l={},p=0,d=0,h=c.length,v=0,y=e&&e.length;if(h)for(var m=0;m<h;m++){var g=c[m],_=y?(o=g._component)?o.__key:(o=g[tt])?o.key:null:null;_||0===_?(p++,l[_]=g):f[v++]=g}if(y)for(var m=0;m<y;m++){if(u=e[m],a=null,p&&u.attributes){var _=u.key;!s(_)&&_ in l&&(a=l[_],l[_]=void 0,p--)}if(!a&&d<v)for(i=d;i<v;i++)if(o=f[i],o&&O(o,u)){a=o,f[i]=void 0,i===v-1&&v--,i===d&&d++;break}a=I(a,u,n,r),a!==c[m]&&t.insertBefore(a,c[m]||null)}if(p)for(var m in l)l[m]&&(f[d=v++]=l[m]);d<v&&k(f)}function k(t,e){for(var n=t.length;n--;){var r=t[n];r&&D(r,e)}}function D(t,e){var n=t._component;n?H(n,!e):(t[tt]&&t[tt].ref&&t[tt].ref(null),e||A(t),t.childNodes&&t.childNodes.length&&k(t.childNodes,e))}function U(t,e){var n=t[tt]||w(t);for(var r in n)e&&r in e||x(t,r,null,n[r],at);if(e)for(var i in e)i in n&&e[i]==("value"===i||"selected"===i||"checked"===i?t[i]:n[i])||x(t,i,e[i],n[i],at)}function L(t){var e=t.constructor.name,n=st[e];n?n.push(t):st[e]=[t]}function F(t,e,n){var r=new t(e,n),i=st[t.name];if(i)for(var o=i.length;o--;)if(i[o].constructor===t){r.nextBase=i[o].nextBase,i.splice(o,1);break}return r}function z(t){t._dirty||(t._dirty=!0,h(t))}function X(t,e,n,r,i){var o=t.base;t._disableRendering||(t._disableRendering=!0,(t.__ref=e.ref)&&delete e.ref,(t.__key=e.key)&&delete e.key,s(o)||i?t.componentWillMount&&t.componentWillMount():t.componentWillReceiveProps&&t.componentWillReceiveProps(e,r),r&&r!==t.context&&(t.prevContext||(t.prevContext=t.context),t.context=r),t.prevProps||(t.prevProps=t.props),t.props=e,t._disableRendering=!1,0!==n&&(1!==n&&K.syncComponentUpdates===!1&&o?z(t):q(t,1,i)),t.__ref&&t.__ref(t))}function q(t,e,i){if(!t._disableRendering){var o,a,s=t.props,c=t.state,f=t.context,l=t.prevProps||s,p=t.prevState||c,d=t.prevContext||f,h=t.base,v=h||t.nextBase,g=v&&v.nextSibling,_=v&&v.parentNode,b=v&&v._component,x=t._component;if(h&&(t.props=l,t.state=p,t.context=d,2!==e&&t.shouldComponentUpdate&&t.shouldComponentUpdate(s,c,f)===!1?o=!0:t.componentWillUpdate&&t.componentWillUpdate(s,c,f),t.props=s,t.state=c,t.context=f),t.prevProps=t.prevState=t.prevContext=t.nextBase=null,t._dirty=!1,!o){for(t.render&&(a=t.render(s,c,f)),t.getChildContext&&(f=n(r(f),t.getChildContext()));y(a);)a=m(a,f);var T,E,w=a&&a.nodeName;if(u(w)&&w.prototype.render){var O=x,S=j(a);O&&O.constructor===w?X(O,S,1,f):(T=O,O=F(w,S,f),O._parentComponent=t,t._component=O,X(O,S,0,f),q(O,1)),E=O.base}else{var A=v;T=x,T&&(A=t._component=null),(v||1===e)&&(A&&(A._component=null),E=C(A,a,f,i||!h))}if(v&&E!==v&&(_&&E!==_&&_.insertBefore(E,g||null),T||b!==t||x||!v.parentNode||(v._component=null,D(v))),T&&H(T,!0),t.base=E,E){for(var P=t,N=t;N=N._parentComponent;)P=N;E._component=P,E._componentConstructor=P.constructor}}!h||i?(ot.unshift(t),ut||M()):!o&&t.componentDidUpdate&&t.componentDidUpdate(l,p,d);var I,R=t._renderCallbacks;if(R)for(;I=R.pop();)I.call(t);return a}}function Y(t,e,n,r){for(var i=t&&t._component,o=t,u=i&&t._componentConstructor===e.nodeName,a=u,s=j(e);i&&!a&&(i=i._parentComponent);)a=i.constructor===e.nodeName;return!a||r&&!i._component?(i&&!u&&(H(i,!0),t=o=null),i=F(e.nodeName,s,n),t&&!i.nextBase&&(i.nextBase=t),X(i,s,1,n,r),t=i.base,o&&t!==o&&(o._component=null,D(o))):(X(i,s,3,n,r),t=i.base),t}function H(t,e){var n=t.base;t._disableRendering=!0,t.componentWillUnmount&&t.componentWillUnmount(),t.base=null;var r=t._component;r?H(r,e):n&&(n[tt]&&n[tt].ref&&n[tt].ref(null),t.nextBase=n,e&&(b(n),L(t)),k(n.childNodes,!e)),t.__ref&&t.__ref(null),t.componentDidUnmount&&t.componentDidUnmount()}function W(t,e){this._dirty=!0,this._disableRendering=!1,this.prevState=this.prevProps=this.prevContext=this.base=this.nextBase=this._parentComponent=this._component=this.__ref=this.__key=this._linkedStates=this._renderCallbacks=null,this.context=e||{},this.props=t,this.state=this.getInitialState&&this.getInitialState()||{}}function V(t,e,n){return C(n,t,{},!1,e)}var B={},G=function(t){return B[t]||(B[t]=t.toLowerCase())},J="undefined"!=typeof Promise&&Promise.resolve(),Z=J?function(t){J.then(t)}:setTimeout,K={vnode:s},Q=[],$={},tt="undefined"!=typeof Symbol?Symbol["for"]("preactattr"):"__preactattr_",et={boxFlex:1,boxFlexGroup:1,columnCount:1,fillOpacity:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,fontWeight:1,lineClamp:1,lineHeight:1,opacity:1,order:1,orphans:1,strokeOpacity:1,widows:1,zIndex:1,zoom:1},nt=[],rt=[],it={},ot=[],ut=0,at=!1,st={};n(W.prototype,{linkState:function(t,e){var n=this._linkedStates||(this._linkedStates={}),r=t+"|"+e;return n[r]||(n[r]=d(this,t,e))},setState:function(t,e){var i=this.state;this.prevState||(this.prevState=r(i)),n(i,u(t)?t(i,this.props):t),e&&(this._renderCallbacks=this._renderCallbacks||[]).push(e),z(this)},forceUpdate:function(){q(this,2)},render:function(){return null}}),t.h=l,t.cloneElement=p,t.Component=W,t.render=V,t.rerender=v,t.options=K})}).call(e,n(3).setImmediate)},function(t,e,n){(function(t,r){function i(t,e){this._id=t,this._clearFn=e}var o=n(4).nextTick,u=Function.prototype.apply,a=Array.prototype.slice,s={},c=0;e.setTimeout=function(){return new i(u.call(setTimeout,window,arguments),clearTimeout)},e.setInterval=function(){return new i(u.call(setInterval,window,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(window,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},e.setImmediate="function"==typeof t?t:function(t){var n=c++,r=!(arguments.length<2)&&a.call(arguments,1);return s[n]=!0,o(function(){s[n]&&(r?t.apply(null,r):t.call(null),e.clearImmediate(n))}),n},e.clearImmediate="function"==typeof r?r:function(t){delete s[t]}}).call(e,n(3).setImmediate,n(3).clearImmediate)},function(t,e){function n(){l&&c&&(l=!1,c.length?f=c.concat(f):p=-1,f.length&&r())}function r(){if(!l){var t=u.call(null,n);l=!0;for(var e=f.length;e;){for(c=f,f=[];++p<e;)c&&c[p].run();p=-1,e=f.length}c=null,l=!1,a.call(null,t)}}function i(t,e){this.fun=t,this.array=e}function o(){}var u,a,s=t.exports={};!function(){try{u=setTimeout}catch(t){u=function(){throw new Error("setTimeout is not defined")}}try{a=clearTimeout}catch(t){a=function(){throw new Error("clearTimeout is not defined")}}}();var c,f=[],l=!1,p=-1;s.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];f.push(new i(t,e)),1!==f.length||l||u.call(null,r,0)},i.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=o,s.addListener=o,s.once=o,s.off=o,s.removeListener=o,s.removeAllListeners=o,s.emit=o,s.binding=function(t){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(t){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(6),o=r(i),u=n(32),a=r(u),s=n(33),c=r(s),f=n(37),l=r(f),p=n(84),d=r(p),h=n(2),v=n(92),y=r(v),m=n(116),g=r(m),_=n(130),b=r(_),x=n(131),T=r(x),E=n(113),w=n(139),O=r(w);n(132);var S=function(t){function e(){return(0,a["default"])(this,e),(0,l["default"])(this,(0,o["default"])(e).apply(this,arguments))}return(0,d["default"])(e,t),(0,c["default"])(e,[{key:"componentDidMount",value:function(){var t=this;(0,T["default"])(new b["default"](this.base)).on("pan",function(e){t.x=e.deltaX,t.y=e.deltaY,y["default"].dispatch({type:"EDITOR_TRANSLATE",data:{x:e.deltaX,y:e.deltaY}})}).on("panend",function(e){var n=e.deltaX,r=e.deltaY,i=y["default"].getState().resize.translate;t.x=t.y=0,y["default"].dispatch({type:"EDITOR_TRANSLATE",data:{x:i.x+n,y:i.y+r}})}).on("tap",function(t){y["default"].dispatch({type:"POINT_DESELECT_ALL"})});this._addKeyUp(),y["default"].subscribe(function(){t.render()})}},{key:"_addKeyUp",value:function(){document.addEventListener("keyup",this._onKeyUp)}},{key:"_onKeyUp",value:function(t){if(t.altKey)switch(t.which){case 90:return y["default"].dispatch(E.ActionCreators.undo());case 88:return y["default"].dispatch(E.ActionCreators.redo());case 68:return y["default"].dispatch({type:"POINT_DELETE"})}}},{key:"_getStyle",value:function(){var t=this.props.state,e=t.resize,n=e.temp_top,r=e.temp_bottom,i=e.temp_right,o=e.translate;n+=e.top,r+=e.bottom,i+=e.right;var u=g["default"].CURVE_SIZE+53,a=g["default"].CURVE_SIZE+2*g["default"].CURVE_PADDING;a-n<a&&(n=0),a+r<a&&(r=0),u+i<u&&(i=0),n=(0,O["default"])(n,-1),r=(0,O["default"])(r);var s="height: "+(a-n+r)+"px",c="width: "+(u+i)+"px",f=(this.x||0)+o.x,l=(this.y||0)+o.y,p="transform: translate("+f+"px, "+(l+n)+"px)";return""+mojs.h.prefix.css+p+"; "+p+"; "+c+"; "+s+";"}},{key:"render",value:function(){var t=n(136),e=this.props.state,r=(e.resize,this._getStyle());return(0,h.h)("div",{className:t["curve-editor"],style:r},(0,h.h)("div",{className:t["curve-editor__left"]}),(0,h.h)("div",{className:t["curve-editor__right"]}))}}]),e}(h.Component);e["default"]=S},function(t,e,n){t.exports={"default":n(7),__esModule:!0}},function(t,e,n){n(8),t.exports=n(19).Object.getPrototypeOf},function(t,e,n){var r=n(9),i=n(11);n(17)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,e,n){var r=n(10);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(12),i=n(9),o=n(13)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(14)("keys"),i=n(16);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e,n){var r=n(15),i="__core-js_shared__",o=r[i]||(r[i]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(18),i=n(19),o=n(28);t.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*o(function(){n(1)}),"Object",u)}},function(t,e,n){var r=n(15),i=n(19),o=n(20),u=n(22),a="prototype",s=function(t,e,n){var c,f,l,p=t&s.F,d=t&s.G,h=t&s.S,v=t&s.P,y=t&s.B,m=t&s.W,g=d?i:i[e]||(i[e]={}),_=g[a],b=d?r:h?r[e]:(r[e]||{})[a];d&&(n=e);for(c in n)f=!p&&b&&void 0!==b[c],f&&c in g||(l=f?b[c]:n[c],g[c]=d&&"function"!=typeof b[c]?n[c]:y&&f?o(l,r):m&&b[c]==l?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e[a]=t[a],e}(l):v&&"function"==typeof l?o(Function.call,l):l,v&&((g.virtual||(g.virtual={}))[c]=l,t&s.R&&_&&!_[c]&&u(_,c,l)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},function(t,e){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(21);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(23),i=n(31);t.exports=n(27)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(24),i=n(26),o=n(30),u=Object.defineProperty;e.f=n(27)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return u(t,e,n)}catch(a){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(25);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=!n(27)&&!n(28)(function(){return 7!=Object.defineProperty(n(29)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){t.exports=!n(28)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},function(t,e,n){var r=n(25),i=n(15).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){var r=n(25);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){"use strict";e.__esModule=!0,e["default"]=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}e.__esModule=!0;var i=n(34),o=r(i);e["default"]=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),(0,o["default"])(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}()},function(t,e,n){t.exports={"default":n(35),__esModule:!0}},function(t,e,n){n(36);var r=n(19).Object;t.exports=function(t,e,n){return r.defineProperty(t,e,n)}},function(t,e,n){var r=n(18);r(r.S+r.F*!n(27),"Object",{defineProperty:n(23).f})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}e.__esModule=!0;var i=n(38),o=r(i);e["default"]=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!==("undefined"==typeof e?"undefined":(0,o["default"])(e))&&"function"!=typeof e?t:e}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}e.__esModule=!0;var i=n(39),o=r(i),u=n(68),a=r(u),s="function"==typeof a["default"]&&"symbol"==typeof o["default"]?function(t){return typeof t}:function(t){return t&&"function"==typeof a["default"]&&t.constructor===a["default"]?"symbol":typeof t};e["default"]="function"==typeof a["default"]&&"symbol"===s(o["default"])?function(t){return"undefined"==typeof t?"undefined":s(t)}:function(t){return t&&"function"==typeof a["default"]&&t.constructor===a["default"]?"symbol":"undefined"==typeof t?"undefined":s(t)}},function(t,e,n){t.exports={"default":n(40),__esModule:!0}},function(t,e,n){n(41),n(63),t.exports=n(67).f("iterator")},function(t,e,n){"use strict";var r=n(42)(!0);n(44)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){var r=n(43),i=n(10);t.exports=function(t){return function(e,n){var o,u,a=String(i(e)),s=r(n),c=a.length;return s<0||s>=c?t?"":void 0:(o=a.charCodeAt(s),o<55296||o>56319||s+1===c||(u=a.charCodeAt(s+1))<56320||u>57343?t?a.charAt(s):o:t?a.slice(s,s+2):(o-55296<<10)+(u-56320)+65536)}}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){"use strict";var r=n(45),i=n(18),o=n(46),u=n(22),a=n(12),s=n(47),c=n(48),f=n(61),l=n(11),p=n(62)("iterator"),d=!([].keys&&"next"in[].keys()),h="@@iterator",v="keys",y="values",m=function(){return this};t.exports=function(t,e,n,g,_,b,x){c(n,e,g);var T,E,w,O=function(t){if(!d&&t in P)return P[t];switch(t){case v:return function(){return new n(this,t)};case y:return function(){return new n(this,t)}}return function(){return new n(this,t)}},S=e+" Iterator",j=_==y,A=!1,P=t.prototype,N=P[p]||P[h]||_&&P[_],M=N||O(_),C=_?j?O("entries"):M:void 0,I="Array"==e?P.entries||N:N;if(I&&(w=l(I.call(new t)),w!==Object.prototype&&(f(w,S,!0),r||a(w,p)||u(w,p,m))),j&&N&&N.name!==y&&(A=!0,M=function(){return N.call(this)}),r&&!x||!d&&!A&&P[p]||u(P,p,M),s[e]=M,s[S]=m,_)if(T={values:j?M:O(y),keys:b?M:O(v),entries:C},x)for(E in T)E in P||o(P,E,T[E]);else i(i.P+i.F*(d||A),e,T);return T}},function(t,e){t.exports=!0},function(t,e,n){t.exports=n(22)},function(t,e){t.exports={}},function(t,e,n){"use strict";var r=n(49),i=n(31),o=n(61),u={};n(22)(u,n(62)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var r=n(24),i=n(50),o=n(59),u=n(13)("IE_PROTO"),a=function(){},s="prototype",c=function(){var t,e=n(29)("iframe"),r=o.length,i="<",u=">";for(e.style.display="none",n(60).appendChild(e),e.src="javascript:",t=e.contentWindow.document,t.open(),t.write(i+"script"+u+"document.F=Object"+i+"/script"+u),t.close(),c=t.F;r--;)delete c[s][o[r]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(a[s]=r(t),n=new a,a[s]=null,n[u]=t):n=c(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(23),i=n(24),o=n(51);t.exports=n(27)?Object.defineProperties:function(t,e){i(t);for(var n,u=o(e),a=u.length,s=0;a>s;)r.f(t,n=u[s++],e[n]);return t}},function(t,e,n){var r=n(52),i=n(59);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){var r=n(12),i=n(53),o=n(56)(!1),u=n(13)("IE_PROTO");t.exports=function(t,e){var n,a=i(t),s=0,c=[];for(n in a)n!=u&&r(a,n)&&c.push(n);for(;e.length>s;)r(a,n=e[s++])&&(~o(c,n)||c.push(n));return c}},function(t,e,n){var r=n(54),i=n(10);t.exports=function(t){return r(i(t))}},function(t,e,n){var r=n(55);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(53),i=n(57),o=n(58);t.exports=function(t){return function(e,n,u){var a,s=r(e),c=i(s.length),f=o(u,c);if(t&&n!=n){for(;c>f;)if(a=s[f++],a!=a)return!0}else for(;c>f;f++)if((t||f in s)&&s[f]===n)return t||f||0;return!t&&-1}}},function(t,e,n){var r=n(43),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){var r=n(43),i=Math.max,o=Math.min;t.exports=function(t,e){return t=r(t),t<0?i(t+e,0):o(t,e)}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){t.exports=n(15).document&&document.documentElement},function(t,e,n){var r=n(23).f,i=n(12),o=n(62)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){var r=n(14)("wks"),i=n(16),o=n(15).Symbol,u="function"==typeof o,a=t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))};a.store=r},function(t,e,n){n(64);for(var r=n(15),i=n(22),o=n(47),u=n(62)("toStringTag"),a=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],s=0;s<5;s++){var c=a[s],f=r[c],l=f&&f.prototype;l&&!l[u]&&i(l,u,c),o[c]=o.Array}},function(t,e,n){"use strict";var r=n(65),i=n(66),o=n(47),u=n(53);t.exports=n(44)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):"keys"==e?i(0,n):"values"==e?i(0,t[n]):i(0,[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){e.f=n(62)},function(t,e,n){t.exports={"default":n(69),__esModule:!0}},function(t,e,n){n(70),n(81),n(82),n(83),t.exports=n(19).Symbol},function(t,e,n){"use strict";var r=n(15),i=n(12),o=n(27),u=n(18),a=n(46),s=n(71).KEY,c=n(28),f=n(14),l=n(61),p=n(16),d=n(62),h=n(67),v=n(72),y=n(73),m=n(74),g=n(77),_=n(24),b=n(53),x=n(30),T=n(31),E=n(49),w=n(78),O=n(80),S=n(23),j=n(51),A=O.f,P=S.f,N=w.f,M=r.Symbol,C=r.JSON,I=C&&C.stringify,R="prototype",k=d("_hidden"),D=d("toPrimitive"),U={}.propertyIsEnumerable,L=f("symbol-registry"),F=f("symbols"),z=f("op-symbols"),X=Object[R],q="function"==typeof M,Y=r.QObject,H=!Y||!Y[R]||!Y[R].findChild,W=o&&c(function(){
return 7!=E(P({},"a",{get:function(){return P(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=A(X,e);r&&delete X[e],P(t,e,n),r&&t!==X&&P(X,e,r)}:P,V=function(t){var e=F[t]=E(M[R]);return e._k=t,e},B=q&&"symbol"==typeof M.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof M},G=function(t,e,n){return t===X&&G(z,e,n),_(t),e=x(e,!0),_(n),i(F,e)?(n.enumerable?(i(t,k)&&t[k][e]&&(t[k][e]=!1),n=E(n,{enumerable:T(0,!1)})):(i(t,k)||P(t,k,T(1,{})),t[k][e]=!0),W(t,e,n)):P(t,e,n)},J=function(t,e){_(t);for(var n,r=m(e=b(e)),i=0,o=r.length;o>i;)G(t,n=r[i++],e[n]);return t},Z=function(t,e){return void 0===e?E(t):J(E(t),e)},K=function(t){var e=U.call(this,t=x(t,!0));return!(this===X&&i(F,t)&&!i(z,t))&&(!(e||!i(this,t)||!i(F,t)||i(this,k)&&this[k][t])||e)},Q=function(t,e){if(t=b(t),e=x(e,!0),t!==X||!i(F,e)||i(z,e)){var n=A(t,e);return!n||!i(F,e)||i(t,k)&&t[k][e]||(n.enumerable=!0),n}},$=function(t){for(var e,n=N(b(t)),r=[],o=0;n.length>o;)i(F,e=n[o++])||e==k||e==s||r.push(e);return r},tt=function(t){for(var e,n=t===X,r=N(n?z:b(t)),o=[],u=0;r.length>u;)!i(F,e=r[u++])||n&&!i(X,e)||o.push(F[e]);return o};q||(M=function(){if(this instanceof M)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===X&&e.call(z,n),i(this,k)&&i(this[k],t)&&(this[k][t]=!1),W(this,t,T(1,n))};return o&&H&&W(X,t,{configurable:!0,set:e}),V(t)},a(M[R],"toString",function(){return this._k}),O.f=Q,S.f=G,n(79).f=w.f=$,n(76).f=K,n(75).f=tt,o&&!n(45)&&a(X,"propertyIsEnumerable",K,!0),h.f=function(t){return V(d(t))}),u(u.G+u.W+u.F*!q,{Symbol:M});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)d(et[nt++]);for(var et=j(d.store),nt=0;et.length>nt;)v(et[nt++]);u(u.S+u.F*!q,"Symbol",{"for":function(t){return i(L,t+="")?L[t]:L[t]=M(t)},keyFor:function(t){if(B(t))return y(L,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){H=!0},useSimple:function(){H=!1}}),u(u.S+u.F*!q,"Object",{create:Z,defineProperty:G,defineProperties:J,getOwnPropertyDescriptor:Q,getOwnPropertyNames:$,getOwnPropertySymbols:tt}),C&&u(u.S+u.F*(!q||c(function(){var t=M();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))})),"JSON",{stringify:function(t){if(void 0!==t&&!B(t)){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);return e=r[1],"function"==typeof e&&(n=e),!n&&g(e)||(e=function(t,e){if(n&&(e=n.call(this,t,e)),!B(e))return e}),r[1]=e,I.apply(C,r)}}}),M[R][D]||n(22)(M[R],D,M[R].valueOf),l(M,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,e,n){var r=n(16)("meta"),i=n(25),o=n(12),u=n(23).f,a=0,s=Object.isExtensible||function(){return!0},c=!n(28)(function(){return s(Object.preventExtensions({}))}),f=function(t){u(t,r,{value:{i:"O"+ ++a,w:{}}})},l=function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!s(t))return"F";if(!e)return"E";f(t)}return t[r].i},p=function(t,e){if(!o(t,r)){if(!s(t))return!0;if(!e)return!1;f(t)}return t[r].w},d=function(t){return c&&h.NEED&&s(t)&&!o(t,r)&&f(t),t},h=t.exports={KEY:r,NEED:!1,fastKey:l,getWeak:p,onFreeze:d}},function(t,e,n){var r=n(15),i=n(19),o=n(45),u=n(67),a=n(23).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:u.f(t)})}},function(t,e,n){var r=n(51),i=n(53);t.exports=function(t,e){for(var n,o=i(t),u=r(o),a=u.length,s=0;a>s;)if(o[n=u[s++]]===e)return n}},function(t,e,n){var r=n(51),i=n(75),o=n(76);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var u,a=n(t),s=o.f,c=0;a.length>c;)s.call(t,u=a[c++])&&e.push(u);return e}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(55);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(53),i=n(79).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],a=function(t){try{return i(t)}catch(e){return u.slice()}};t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?a(t):i(r(t))}},function(t,e,n){var r=n(52),i=n(59).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){var r=n(76),i=n(31),o=n(53),u=n(30),a=n(12),s=n(26),c=Object.getOwnPropertyDescriptor;e.f=n(27)?c:function(t,e){if(t=o(t),e=u(e,!0),s)try{return c(t,e)}catch(n){}if(a(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e){},function(t,e,n){n(72)("asyncIterator")},function(t,e,n){n(72)("observable")},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}e.__esModule=!0;var i=n(85),o=r(i),u=n(89),a=r(u),s=n(38),c=r(s);e["default"]=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof e?"undefined":(0,c["default"])(e)));t.prototype=(0,a["default"])(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(o["default"]?(0,o["default"])(t,e):t.__proto__=e)}},function(t,e,n){t.exports={"default":n(86),__esModule:!0}},function(t,e,n){n(87),t.exports=n(19).Object.setPrototypeOf},function(t,e,n){var r=n(18);r(r.S,"Object",{setPrototypeOf:n(88).set})},function(t,e,n){var r=n(25),i=n(24),o=function(t,e){if(i(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{r=n(20)(Function.call,n(80).f(Object.prototype,"__proto__").set,2),r(t,[]),e=!(t instanceof Array)}catch(i){e=!0}return function(t,n){return o(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:o}},function(t,e,n){t.exports={"default":n(90),__esModule:!0}},function(t,e,n){n(91);var r=n(19).Object;t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){var r=n(18);r(r.S,"Object",{create:n(49)})},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(93),o=n(107),u=r(o),a=(0,i.createStore)(u["default"]);e["default"]=a},function(t,e,n){(function(t){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function i(){}e.__esModule=!0,e.compose=e.applyMiddleware=e.bindActionCreators=e.combineReducers=e.createStore=void 0;var o=n(94),u=r(o),a=n(102),s=r(a),c=n(104),f=r(c),l=n(105),p=r(l),d=n(106),h=r(d),v=n(103),y=r(v);"production"!==t.env.NODE_ENV&&"string"==typeof i.name&&"isCrushed"!==i.name&&(0,y["default"])("You are currently using minified code outside of NODE_ENV === 'production'. This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) to ensure you have the correct code for your production build."),e.createStore=u["default"],e.combineReducers=s["default"],e.bindActionCreators=f["default"],e.applyMiddleware=p["default"],e.compose=h["default"]}).call(e,n(4))},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function i(t,e,n){function r(){m===y&&(m=y.slice())}function o(){return v}function a(t){if("function"!=typeof t)throw new Error("Expected listener to be a function.");var e=!0;return r(),m.push(t),function(){if(e){e=!1,r();var n=m.indexOf(t);m.splice(n,1)}}}function f(t){if(!(0,u["default"])(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if("undefined"==typeof t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(g)throw new Error("Reducers may not dispatch actions.");try{g=!0,v=h(v,t)}finally{g=!1}for(var e=y=m,n=0;n<e.length;n++)e[n]();return t}function l(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");h=t,f({type:c.INIT})}function p(){var t,e=a;return t={subscribe:function(t){function n(){t.next&&t.next(o())}if("object"!=typeof t)throw new TypeError("Expected the observer to be an object.");n();var r=e(n);return{unsubscribe:r}}},t[s["default"]]=function(){return this},t}var d;if("function"==typeof e&&"undefined"==typeof n&&(n=e,e=void 0),"undefined"!=typeof n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(i)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var h=t,v=e,y=[],m=y,g=!1;return f({type:c.INIT}),d={dispatch:f,subscribe:a,getState:o,replaceReducer:l},d[s["default"]]=p,d}e.__esModule=!0,e.ActionTypes=void 0,e["default"]=i;var o=n(95),u=r(o),a=n(100),s=r(a),c=e.ActionTypes={INIT:"@@redux/INIT"}},function(t,e,n){function r(t){if(!u(t)||p.call(t)!=a||o(t))return!1;var e=i(t);if(null===e)return!0;var n=f.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&c.call(n)==l}var i=n(96),o=n(98),u=n(99),a="[object Object]",s=Object.prototype,c=Function.prototype.toString,f=s.hasOwnProperty,l=c.call(Object),p=s.toString;t.exports=r},function(t,e,n){var r=n(97),i=Object.getPrototypeOf,o=r(i,Object);t.exports=o},function(t,e){function n(t,e){return function(n){return t(e(n))}}t.exports=n},function(t,e){function n(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(n){}return e}t.exports=n},function(t,e){function n(t){return!!t&&"object"==typeof t}t.exports=n},function(t,e,n){(function(e){"use strict";t.exports=n(101)(e||window||this)}).call(e,function(){return this}())},function(t,e){"use strict";t.exports=function(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}},function(t,e,n){(function(t){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){var n=e&&e.type,r=n&&'"'+n.toString()+'"'||"an action";return"Given action "+r+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state.'}function o(t,e,n){var r=Object.keys(e),i=n&&n.type===s.ActionTypes.INIT?"initialState argument passed to createStore":"previous state received by the reducer";if(0===r.length)return"Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";if(!(0,f["default"])(t))return"The "+i+' has unexpected type of "'+{}.toString.call(t).match(/\s([a-z|A-Z]+)/)[1]+'". Expected argument to be an object with the following '+('keys: "'+r.join('", "')+'"');var o=Object.keys(t).filter(function(t){return!e.hasOwnProperty(t)});return o.length>0?"Unexpected "+(o.length>1?"keys":"key")+" "+('"'+o.join('", "')+'" found in '+i+". ")+"Expected to find one of the known reducer keys instead: "+('"'+r.join('", "')+'". Unexpected keys will be ignored.'):void 0}function u(t){Object.keys(t).forEach(function(e){var n=t[e],r=n(void 0,{type:s.ActionTypes.INIT});if("undefined"==typeof r)throw new Error('Reducer "'+e+'" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined.');var i="@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".");if("undefined"==typeof n(void 0,{type:i}))throw new Error('Reducer "'+e+'" returned undefined when probed with a random type. '+("Don't try to handle "+s.ActionTypes.INIT+' or other actions in "redux/*" ')+"namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined.")})}function a(e){for(var n=Object.keys(e),r={},a=0;a<n.length;a++){var s=n[a];"function"==typeof e[s]&&(r[s]=e[s])}var c,f=Object.keys(r);try{u(r)}catch(l){c=l}return function(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=arguments[1];if(c)throw c;if("production"!==t.env.NODE_ENV){var u=o(e,r,n);u&&(0,p["default"])(u)}for(var a=!1,s={},l=0;l<f.length;l++){var d=f[l],h=r[d],v=e[d],y=h(v,n);if("undefined"==typeof y){var m=i(d,n);throw new Error(m)}s[d]=y,a=a||y!==v}return a?s:e}}e.__esModule=!0,e["default"]=a;var s=n(94),c=n(95),f=r(c),l=n(103),p=r(l)}).call(e,n(4))},function(t,e){"use strict";function n(t){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(t);try{throw new Error(t)}catch(e){}}e.__esModule=!0,e["default"]=n},function(t,e){"use strict";function n(t,e){return function(){return e(t.apply(void 0,arguments))}}function r(t,e){if("function"==typeof t)return n(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var r=Object.keys(t),i={},o=0;o<r.length;o++){var u=r[o],a=t[u];"function"==typeof a&&(i[u]=n(a,e))}return i}e.__esModule=!0,e["default"]=r},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function i(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(n,r,i){var u=t(n,r,i),s=u.dispatch,c=[],f={getState:u.getState,dispatch:function(t){return s(t)}};return c=e.map(function(t){return t(f)}),s=a["default"].apply(void 0,c)(u.dispatch),o({},u,{dispatch:s})}}}e.__esModule=!0;var o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};e["default"]=i;var u=n(106),a=r(u)},function(t,e){"use strict";function n(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];if(0===e.length)return function(t){return t};var r=function(){var t=e[e.length-1],n=e.slice(0,-1);return{v:function(){return n.reduceRight(function(t,e){return e(t)},t.apply(void 0,arguments))}}}();return"object"==typeof r?r.v:void 0}e.__esModule=!0,e["default"]=n},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(108),o=r(i),u=n(93),a=n(113),s=r(a),c=n(114),f=r(c),l=n(117),p=r(l),d=n(129),h=r(d),v={limit:10,filter:function(t,e,n){return t.isRecord},debug:!1},y=(0,u.combineReducers)({pointControls:(0,s["default"])(h["default"],(0,o["default"])({},v)),resize:f["default"],points:(0,s["default"])(p["default"],(0,o["default"])({},v))});e["default"]=y},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}e.__esModule=!0;var i=n(109),o=r(i);e["default"]=o["default"]||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}},function(t,e,n){t.exports={"default":n(110),__esModule:!0}},function(t,e,n){n(111),t.exports=n(19).Object.assign},function(t,e,n){var r=n(18);r(r.S+r.F,"Object",{assign:n(112)})},function(t,e,n){"use strict";var r=n(51),i=n(75),o=n(76),u=n(9),a=n(54),s=Object.assign;t.exports=!s||n(28)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=s({},t)[n]||Object.keys(s({},e)).join("")!=r})?function(t,e){for(var n=u(t),s=arguments.length,c=1,f=i.f,l=o.f;s>c;)for(var p,d=a(arguments[c++]),h=f?r(d).concat(f(d)):r(d),v=h.length,y=0;v>y;)l.call(d,p=h[y++])&&(n[p]=d[p]);return n}:s},function(t,e){"use strict";function n(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function r(){if(T){for(var t,e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];console.group||n.unshift("%credux-undo","font-style: italic"),(t=console).log.apply(t,n)}}function i(t,e){if(T){var n=["action",t.type];if(console.group){var i;n.unshift("%credux-undo","font-style: italic"),(i=console).groupCollapsed.apply(i,n),console.log("received",{state:e,action:t})}else r.apply(void 0,n)}}function o(){if(T)return console.groupEnd&&console.groupEnd()}function u(t){var e=t.past,n=t.future;return e.length+1+n.length}function a(t,e,i){r("insert",{state:e,history:t,free:i-u(t)});var o=t.past,a=t.present,s=i&&u(t)>=i;return void 0===a?{past:[],present:e,future:[]}:{past:[].concat(n(o.slice(s?1:0)),[a]),present:e,future:[]}}function s(t){r("undo",{history:t});var e=t.past,i=t.present,o=t.future;return e.length<=0?t:{past:e.slice(0,e.length-1),present:e[e.length-1],future:[i].concat(n(o))}}function c(t){r("redo",{history:t});var e=t.past,i=t.present,o=t.future;return o.length<=0?t:{future:o.slice(1,o.length),present:o[0],past:[].concat(n(e),[i])}}function f(t,e){if(0===e)return c(t);var n=t.past,r=t.present,i=t.future;return{future:i.slice(e+1),present:i[e],past:n.concat([r]).concat(i.slice(0,e))}}function l(t,e){if(e===t.past.length-1)return s(t);var n=t.past,r=t.present,i=t.future;return{future:n.slice(e+1).concat([r]).concat(i),present:n[e],past:n.slice(0,e)}}function p(t){return x({},t,{history:t})}function d(t,e){return p(x({},t,e))}function h(t){return{past:[],present:t,future:[]}}function v(t){var e=arguments.length<=1||void 0===arguments[1]?[]:arguments[1];return Array.isArray(t)?t:"string"==typeof t?[t]:e}function y(t){var e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];T=e.debug;var n={initialState:e.initialState,initTypes:v(e.initTypes,["@@redux/INIT","@@INIT"]),limit:e.limit,filter:e.filter||function(){return!0},undoType:e.undoType||E.UNDO,redoType:e.redoType||E.REDO,jumpToPastType:e.jumpToPastType||E.JUMP_TO_PAST,jumpToFutureType:e.jumpToFutureType||E.JUMP_TO_FUTURE};return n.history=e.initialHistory||h(n.initialState),0===n.initTypes.length&&console.warn("redux-undo: supply at least one action type in initTypes to ensure initial state"),function(e,v){i(v,e);var y=void 0;switch(v.type){case n.undoType:return y=s(e),r("after undo",y),o(),y?d(e,y):e;case n.redoType:return y=c(e),r("after redo",y),o(),y?d(e,y):e;case n.jumpToPastType:return y=l(e,v.index),r("after jumpToPast",y),o(),y?d(e,y):e;case n.jumpToFutureType:return y=f(e,v.index),r("after jumpToFuture",y),o(),y?d(e,y):e;default:if(y=t(e&&e.present,v),n.initTypes.some(function(t){return t===v.type}))return r("reset history due to init action"),o(),p(x({},e,h(y)));if(n.filter&&"function"==typeof n.filter&&!n.filter(v,y,e&&e.present))return r("filter prevented action, not storing it"),o(),p(x({},e,{present:y}));var m=e&&void 0!==e.present?e:n.history,g=a(m,y,n.limit);return r("after insert",{history:g,free:n.limit-u(g)}),o(),p(x({},e,g))}}}function m(){return function(t,e,n){return e!==n}}function g(t){var e=v(t);return function(t){return e.indexOf(t.type)>=0}}function _(t){return console.error("Deprecation Warning: Please change `ifAction` to `includeAction`"),g(t)}function b(){var t=arguments.length<=0||void 0===arguments[0]?[]:arguments[0],e=v(t);return function(t){return e.indexOf(t.type)<0}}Object.defineProperty(e,"__esModule",{value:!0});var x=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};e.parseActions=v,e["default"]=y,e.distinctState=m,e.includeAction=g,e.ifAction=_,e.excludeAction=b;var T=void 0,E=e.ActionTypes={UNDO:"@@redux-undo/UNDO",REDO:"@@redux-undo/REDO",JUMP_TO_FUTURE:"@@redux-undo/JUMP_TO_FUTURE",JUMP_TO_PAST:"@@redux-undo/JUMP_TO_PAST"};e.ActionCreators={undo:function(){return{type:E.UNDO}},redo:function(){return{type:E.REDO}},jumpToFuture:function(t){return{type:E.JUMP_TO_FUTURE,index:t}},jumpToPast:function(t){return{type:E.JUMP_TO_PAST,index:t}}}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(115),o=r(i),u=n(108),a=r(u),s=n(116),c=r(s),f={translate:{x:150,y:100},top:0,temp_top:0,right:0,temp_right:0,bottom:0,temp_bottom:0,scalerX:c["default"].CURVE_PERCENT},l=function(){var t=arguments.length<=0||void 0===arguments[0]?f:arguments[0],e=arguments[1];switch(e.type){case"EDITOR_RESIZE":var n=e.data,r=n.type,i="top"===r||"bottom"===r?n.y:n.x,u=(0,a["default"])({},t,(0,o["default"])({},"temp_"+r,i));return"right"===r&&(u.scalerX=(c["default"].CURVE_SIZE+Math.max(t.right+i,0))/100),u;case"EDITOR_RESIZE_END":var s,l=e.data,p=l.type,d="top"===p||"bottom"===p?l.y:l.x,h=t[""+e.data.type]+d,v="top"===p?"min":"max",y=(0,a["default"])({},t,(s={},(0,o["default"])(s,""+e.data.type,Math[v](0,h)),(0,o["default"])(s,"temp_"+e.data.type,0),s));return y;case"EDITOR_TRANSLATE":return(0,a["default"])({},t,{translate:e.data})}return t};e["default"]=l},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}e.__esModule=!0;var i=n(34),o=r(i);e["default"]=function(t,e,n){return e in t?(0,o["default"])(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=350;e["default"]={CURVE_SIZE:n,CURVE_PERCENT:n/100,CURVE_PADDING:10}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(118),o=r(i),u=n(108),a=r(u),s=n(128),c=r(s),f=n(116),l=r(f),p=[(0,c["default"])({x:0,y:l["default"].CURVE_SIZE,isLockedX:!0,type:"straight"}),(0,c["default"])({x:50,y:l["default"].CURVE_SIZE/2,type:"mirrored"}),(0,c["default"])({x:100,y:0,isLockedX:!0})],d=function(t){for(var e=[],n=0;n<t.length;n++)e.push((0,a["default"])({},t[n],{isSelected:!1}));return e},h=function(t){for(var e=[],n=0;n<t.length;n++)t[n].isSelected&&e.push(n);return e},v=function(){var t=arguments.length<=0||void 0===arguments[0]?p:arguments[0],e=arguments[1];switch(e.type){case"POINT_TRANSLATE":var n=e.data,r=n.index,i=t[r],u=[].concat((0,o["default"])(t));return u[n.index]=(0,a["default"])({},i,{tempX:n.x,tempY:n.y}),u;case"POINT_TRANSLATE_END":var s=e.data,f=t[s],v=[].concat((0,o["default"])(t));return v[s]=(0,a["default"])({},f,{x:f.x+f.tempX,y:f.y+f.tempY,tempX:0,tempY:0}),v;case"POINT_SELECT":var y=e.data,m=y.index,g=y.isDeselect,_=g?d(t):[].concat((0,o["default"])(t)),b=_[m],x=m===_.length-1?_[m-1]:_[m+1],T=m===_.length-1?1:2,E="handle"+T,w=1===T?2:1,O="handle"+w,S=(0,a["default"])({},b[E]),j=(0,a["default"])({},b[O]);b[E]=S,b[O]=j;var A=null==S.angle||null==S.radius;b.type;if(A){S.radius=50;var P=(x.y-b.y)/l["default"].CURVE_PERCENT,N=x.x-b.x,M=Math.atan(P/N)*(180/Math.PI)-90;N>0&&(M-=180),S.angle=M,j.radius=S.radius,j.angle=S.angle-180}return b.isSelected=!0,_;case"POINT_ADD":var C=e.data,I=C.x,R=C.y,k=C.index,D=d(t);return[].concat((0,o["default"])(D.slice(0,k)),[(0,c["default"])({x:I,y:R,isSelected:!0})],(0,o["default"])(D.slice(k)));case"POINT_DELETE":for(var U=h(t),L=[],F=0;F<t.length;F++){var z=t[F];(U.indexOf(F)===-1||z.isLockedX)&&L.push(z)}return L;case"POINT_CHANGE_TYPE":for(var X=h(t),q=[],F=0;F<t.length;F++){var Y=t[F],H=e.data;q.push((0,a["default"])({},Y)),X.indexOf(F)!==-1&&(q[F].type=H);var W=F,V=q[W],B=(W===q.length-1?q[W-1]:q[W+1],W===q.length-1?1:2),G=1===B?2:1,J="handle"+B,Z="handle"+G,K=(0,a["default"])({},V[J]),Q=(0,a["default"])({},V[Z]);V[J]=K,V[Z]=Q,"mirrored"!==H&&"asymmetric"!==H||(Q.angle=K.angle-180,"mirrored"===H&&(Q.radius=K.radius))}return q;case"POINT_DESELECT_ALL":return d(t);case"HANDLE_TRANSLATE":var $=e.data,tt=[].concat((0,o["default"])(t)),et=(0,a["default"])({},tt[$.parentIndex]);tt[$.parentIndex]=et;var nt="handle"+$.index,rt=(0,a["default"])({},et[nt]);return et[nt]=rt,rt.angle=$.angle,rt.radius=$.radius,tt}return t};e["default"]=v},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}e.__esModule=!0;var i=n(119),o=r(i);e["default"]=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return(0,o["default"])(t)}},function(t,e,n){t.exports={"default":n(120),__esModule:!0}},function(t,e,n){n(41),n(121),t.exports=n(19).Array.from},function(t,e,n){"use strict";var r=n(20),i=n(18),o=n(9),u=n(122),a=n(123),s=n(57),c=n(124),f=n(125);i(i.S+i.F*!n(127)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,i,l,p=o(t),d="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,y=void 0!==v,m=0,g=f(p);if(y&&(v=r(v,h>2?arguments[2]:void 0,2)),void 0==g||d==Array&&a(g))for(e=s(p.length),n=new d(e);e>m;m++)c(n,m,y?v(p[m],m):p[m]);else for(l=g.call(p),n=new d;!(i=l.next()).done;m++)c(n,m,y?u(l,v,[i.value,m],!0):i.value);return n.length=m,n}})},function(t,e,n){var r=n(24);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(o){var u=t["return"];throw void 0!==u&&r(u.call(t)),o}}},function(t,e,n){var r=n(47),i=n(62)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,e,n){"use strict";var r=n(23),i=n(31);t.exports=function(t,e,n){e in t?r.f(t,e,i(0,n)):t[e]=n}},function(t,e,n){var r=n(126),i=n(62)("iterator"),o=n(47);t.exports=n(19).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(55),i=n(62)("toStringTag"),o="Arguments"==r(function(){return arguments}()),u=function(t,e){try{return t[e]}catch(n){}};t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=u(e=Object(t),i))?n:o?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e,n){var r=n(62)("iterator"),i=!1;try{var o=[7][r]();o["return"]=function(){i=!0},Array.from(o,function(){throw 2})}catch(u){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o=[7],u=o[r]();u.next=function(){return{done:n=!0}},o[r]=function(){return u},t(o)}catch(a){}return n}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(108),o=r(i),u=function(t,e){return null!=t?t:e},a=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];return{index:u(t.index,0),angle:u(t.angle,null),radius:u(t.radius,null),isTouched:u(t.isTouched,!1),isSelected:u(t.isSelected,!1)}},s=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];return{x:u(t.x,0),y:u(t.y,0),tempX:u(t.tempX,0),tempY:u(t.tempY,0),isTouched:u(t.isTouched,!1),isSelected:u(t.isSelected,!1)}},c=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];return(0,o["default"])({isLockedX:u(t.isLockedX,!1),isLockedY:u(t.isLockedY,!1),type:u(t.type,"straight")},s(t),{handle1:a(t.handle1||{index:1}),handle2:a(t.handle2||{index:2})})};e["default"]=c},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(108),o=r(i),u={isShow:!1,type:"straight"},a=function(){var t=arguments.length<=0||void 0===arguments[0]?u:arguments[0],e=arguments[1];switch(e.type){case"POINT_SELECT":return(0,o["default"])({},t,{isShow:!e.isDeselect,type:e.data.type});case"POINT_CHANGE_TYPE":return(0,o["default"])({},t,{type:e.data});case"POINT_DESELECT_ALL":return(0,o["default"])({},t,{isShow:!1})}return t};e["default"]=a},function(t,e,n){var r;/*! Hammer.JS - v2.0.7 - 2016-04-22
	 * http://hammerjs.github.io/
	 *
	 * Copyright (c) 2016 Jorik Tangelder;
	 * Licensed under the MIT license */
!function(i,o,u,a){"use strict";function s(t,e,n){return setTimeout(d(t,n),e)}function c(t,e,n){return!!Array.isArray(t)&&(f(t,n[e],n),!0)}function f(t,e,n){var r;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==a)for(r=0;r<t.length;)e.call(n,t[r],r,t),r++;else for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r,t)}function l(t,e,n){var r="DEPRECATED METHOD: "+e+"\n"+n+" AT \n";return function(){var e=new Error("get-stack-trace"),n=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=i.console&&(i.console.warn||i.console.log);return o&&o.call(i.console,r,n),t.apply(this,arguments)}}function p(t,e,n){var r,i=e.prototype;r=t.prototype=Object.create(i),r.constructor=t,r._super=i,n&&vt(r,n)}function d(t,e){return function(){return t.apply(e,arguments)}}function h(t,e){return typeof t==gt?t.apply(e?e[0]||a:a,e):t}function v(t,e){return t===a?e:t}function y(t,e,n){f(b(e),function(e){t.addEventListener(e,n,!1)})}function m(t,e,n){f(b(e),function(e){t.removeEventListener(e,n,!1)})}function g(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function _(t,e){return t.indexOf(e)>-1}function b(t){return t.trim().split(/\s+/g)}function x(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var r=0;r<t.length;){if(n&&t[r][n]==e||!n&&t[r]===e)return r;r++}return-1}function T(t){return Array.prototype.slice.call(t,0)}function E(t,e,n){for(var r=[],i=[],o=0;o<t.length;){var u=e?t[o][e]:t[o];x(i,u)<0&&r.push(t[o]),i[o]=u,o++}return n&&(r=e?r.sort(function(t,n){return t[e]>n[e]}):r.sort()),r}function w(t,e){for(var n,r,i=e[0].toUpperCase()+e.slice(1),o=0;o<yt.length;){if(n=yt[o],r=n?n+i:e,r in t)return r;o++}return a}function O(){return wt++}function S(t){var e=t.ownerDocument||t;return e.defaultView||e.parentWindow||i}function j(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){h(t.options.enable,[t])&&n.handler(e)},this.init()}function A(t){var e,n=t.options.inputClass;return new(e=n?n:jt?q:At?W:St?B:X)(t,P)}function P(t,e,n){var r=n.pointers.length,i=n.changedPointers.length,o=e&Rt&&r-i===0,u=e&(Dt|Ut)&&r-i===0;n.isFirst=!!o,n.isFinal=!!u,o&&(t.session={}),n.eventType=e,N(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function N(t,e){var n=t.session,r=e.pointers,i=r.length;n.firstInput||(n.firstInput=I(e)),i>1&&!n.firstMultiple?n.firstMultiple=I(e):1===i&&(n.firstMultiple=!1);var o=n.firstInput,u=n.firstMultiple,a=u?u.center:o.center,s=e.center=R(r);e.timeStamp=xt(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=L(a,s),e.distance=U(a,s),M(n,e),e.offsetDirection=D(e.deltaX,e.deltaY);var c=k(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=c.x,e.overallVelocityY=c.y,e.overallVelocity=bt(c.x)>bt(c.y)?c.x:c.y,e.scale=u?z(u.pointers,r):1,e.rotation=u?F(u.pointers,r):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,C(n,e);var f=t.element;g(e.srcEvent.target,f)&&(f=e.srcEvent.target),e.target=f}function M(t,e){var n=e.center,r=t.offsetDelta||{},i=t.prevDelta||{},o=t.prevInput||{};e.eventType!==Rt&&o.eventType!==Dt||(i=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},r=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=i.x+(n.x-r.x),e.deltaY=i.y+(n.y-r.y)}function C(t,e){var n,r,i,o,u=t.lastInterval||e,s=e.timeStamp-u.timeStamp;if(e.eventType!=Ut&&(s>It||u.velocity===a)){var c=e.deltaX-u.deltaX,f=e.deltaY-u.deltaY,l=k(s,c,f);r=l.x,i=l.y,n=bt(l.x)>bt(l.y)?l.x:l.y,o=D(c,f),t.lastInterval=e}else n=u.velocity,r=u.velocityX,i=u.velocityY,o=u.direction;e.velocity=n,e.velocityX=r,e.velocityY=i,e.direction=o}function I(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:_t(t.pointers[n].clientX),clientY:_t(t.pointers[n].clientY)},n++;return{timeStamp:xt(),pointers:e,center:R(e),deltaX:t.deltaX,deltaY:t.deltaY}}function R(t){var e=t.length;if(1===e)return{x:_t(t[0].clientX),y:_t(t[0].clientY)};for(var n=0,r=0,i=0;i<e;)n+=t[i].clientX,r+=t[i].clientY,i++;return{x:_t(n/e),y:_t(r/e)}}function k(t,e,n){return{x:e/t||0,y:n/t||0}}function D(t,e){return t===e?Lt:bt(t)>=bt(e)?t<0?Ft:zt:e<0?Xt:qt}function U(t,e,n){n||(n=Vt);var r=e[n[0]]-t[n[0]],i=e[n[1]]-t[n[1]];return Math.sqrt(r*r+i*i)}function L(t,e,n){n||(n=Vt);var r=e[n[0]]-t[n[0]],i=e[n[1]]-t[n[1]];return 180*Math.atan2(i,r)/Math.PI}function F(t,e){return L(e[1],e[0],Bt)+L(t[1],t[0],Bt)}function z(t,e){return U(e[0],e[1],Bt)/U(t[0],t[1],Bt)}function X(){this.evEl=Jt,this.evWin=Zt,this.pressed=!1,j.apply(this,arguments)}function q(){this.evEl=$t,this.evWin=te,j.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function Y(){this.evTarget=ne,this.evWin=re,this.started=!1,j.apply(this,arguments)}function H(t,e){var n=T(t.touches),r=T(t.changedTouches);return e&(Dt|Ut)&&(n=E(n.concat(r),"identifier",!0)),[n,r]}function W(){this.evTarget=oe,this.targetIds={},j.apply(this,arguments)}function V(t,e){var n=T(t.touches),r=this.targetIds;if(e&(Rt|kt)&&1===n.length)return r[n[0].identifier]=!0,[n,n];var i,o,u=T(t.changedTouches),a=[],s=this.target;if(o=n.filter(function(t){return g(t.target,s)}),e===Rt)for(i=0;i<o.length;)r[o[i].identifier]=!0,i++;for(i=0;i<u.length;)r[u[i].identifier]&&a.push(u[i]),e&(Dt|Ut)&&delete r[u[i].identifier],i++;return a.length?[E(o.concat(a),"identifier",!0),a]:void 0}function B(){j.apply(this,arguments);var t=d(this.handler,this);this.touch=new W(this.manager,t),this.mouse=new X(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function G(t,e){t&Rt?(this.primaryTouch=e.changedPointers[0].identifier,J.call(this,e)):t&(Dt|Ut)&&J.call(this,e)}function J(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY};this.lastTouches.push(n);var r=this.lastTouches,i=function(){var t=r.indexOf(n);t>-1&&r.splice(t,1)};setTimeout(i,ue)}}function Z(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,r=0;r<this.lastTouches.length;r++){var i=this.lastTouches[r],o=Math.abs(e-i.x),u=Math.abs(n-i.y);if(o<=ae&&u<=ae)return!0}return!1}function K(t,e){this.manager=t,this.set(e)}function Q(t){if(_(t,de))return de;var e=_(t,he),n=_(t,ve);return e&&n?de:e||n?e?he:ve:_(t,pe)?pe:le}function $(){if(!ce)return!1;var t={},e=i.CSS&&i.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(n){t[n]=!e||i.CSS.supports("touch-action",n)}),t}function tt(t){this.options=vt({},this.defaults,t||{}),this.id=O(),this.manager=null,this.options.enable=v(this.options.enable,!0),this.state=me,this.simultaneous={},this.requireFail=[]}function et(t){return t&Te?"cancel":t&be?"end":t&_e?"move":t&ge?"start":""}function nt(t){return t==qt?"down":t==Xt?"up":t==Ft?"left":t==zt?"right":""}function rt(t,e){var n=e.manager;return n?n.get(t):t}function it(){tt.apply(this,arguments)}function ot(){it.apply(this,arguments),this.pX=null,this.pY=null}function ut(){it.apply(this,arguments)}function at(){tt.apply(this,arguments),this._timer=null,this._input=null}function st(){it.apply(this,arguments)}function ct(){it.apply(this,arguments)}function ft(){tt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function lt(t,e){return e=e||{},e.recognizers=v(e.recognizers,lt.defaults.preset),new pt(t,e)}function pt(t,e){this.options=vt({},lt.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=A(this),this.touchAction=new K(this,this.options.touchAction),dt(this,!0),f(this.options.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function dt(t,e){var n=t.element;if(n.style){var r;f(t.options.cssProps,function(i,o){r=w(n.style,o),e?(t.oldCssProps[r]=n.style[r],n.style[r]=i):n.style[r]=t.oldCssProps[r]||""}),e||(t.oldCssProps={})}}function ht(t,e){var n=o.createEvent("Event");n.initEvent(t,!0,!0),n.gesture=e,e.target.dispatchEvent(n)}var vt,yt=["","webkit","Moz","MS","ms","o"],mt=o.createElement("div"),gt="function",_t=Math.round,bt=Math.abs,xt=Date.now;vt="function"!=typeof Object.assign?function(t){if(t===a||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var r=arguments[n];if(r!==a&&null!==r)for(var i in r)r.hasOwnProperty(i)&&(e[i]=r[i])}return e}:Object.assign;var Tt=l(function(t,e,n){for(var r=Object.keys(e),i=0;i<r.length;)(!n||n&&t[r[i]]===a)&&(t[r[i]]=e[r[i]]),i++;return t},"extend","Use `assign`."),Et=l(function(t,e){return Tt(t,e,!0)},"merge","Use `assign`."),wt=1,Ot=/mobile|tablet|ip(ad|hone|od)|android/i,St="ontouchstart"in i,jt=w(i,"PointerEvent")!==a,At=St&&Ot.test(navigator.userAgent),Pt="touch",Nt="pen",Mt="mouse",Ct="kinect",It=25,Rt=1,kt=2,Dt=4,Ut=8,Lt=1,Ft=2,zt=4,Xt=8,qt=16,Yt=Ft|zt,Ht=Xt|qt,Wt=Yt|Ht,Vt=["x","y"],Bt=["clientX","clientY"];j.prototype={handler:function(){},init:function(){this.evEl&&y(this.element,this.evEl,this.domHandler),this.evTarget&&y(this.target,this.evTarget,this.domHandler),this.evWin&&y(S(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&m(this.element,this.evEl,this.domHandler),this.evTarget&&m(this.target,this.evTarget,this.domHandler),this.evWin&&m(S(this.element),this.evWin,this.domHandler)}};var Gt={mousedown:Rt,mousemove:kt,mouseup:Dt},Jt="mousedown",Zt="mousemove mouseup";p(X,j,{handler:function(t){var e=Gt[t.type];e&Rt&&0===t.button&&(this.pressed=!0),e&kt&&1!==t.which&&(e=Dt),this.pressed&&(e&Dt&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:Mt,srcEvent:t}))}});var Kt={pointerdown:Rt,pointermove:kt,pointerup:Dt,pointercancel:Ut,pointerout:Ut},Qt={2:Pt,3:Nt,4:Mt,5:Ct},$t="pointerdown",te="pointermove pointerup pointercancel";i.MSPointerEvent&&!i.PointerEvent&&($t="MSPointerDown",te="MSPointerMove MSPointerUp MSPointerCancel"),p(q,j,{handler:function(t){var e=this.store,n=!1,r=t.type.toLowerCase().replace("ms",""),i=Kt[r],o=Qt[t.pointerType]||t.pointerType,u=o==Pt,a=x(e,t.pointerId,"pointerId");i&Rt&&(0===t.button||u)?a<0&&(e.push(t),a=e.length-1):i&(Dt|Ut)&&(n=!0),a<0||(e[a]=t,this.callback(this.manager,i,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),n&&e.splice(a,1))}});var ee={touchstart:Rt,touchmove:kt,touchend:Dt,touchcancel:Ut},ne="touchstart",re="touchstart touchmove touchend touchcancel";p(Y,j,{handler:function(t){var e=ee[t.type];if(e===Rt&&(this.started=!0),this.started){var n=H.call(this,t,e);e&(Dt|Ut)&&n[0].length-n[1].length===0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:Pt,srcEvent:t})}}});var ie={touchstart:Rt,touchmove:kt,touchend:Dt,touchcancel:Ut},oe="touchstart touchmove touchend touchcancel";p(W,j,{handler:function(t){var e=ie[t.type],n=V.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:Pt,srcEvent:t})}});var ue=2500,ae=25;p(B,j,{handler:function(t,e,n){var r=n.pointerType==Pt,i=n.pointerType==Mt;if(!(i&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(r)G.call(this,e,n);else if(i&&Z.call(this,n))return;this.callback(t,e,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var se=w(mt.style,"touchAction"),ce=se!==a,fe="compute",le="auto",pe="manipulation",de="none",he="pan-x",ve="pan-y",ye=$();K.prototype={set:function(t){t==fe&&(t=this.compute()),ce&&this.manager.element.style&&ye[t]&&(this.manager.element.style[se]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return f(this.manager.recognizers,function(e){h(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),Q(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)return void e.preventDefault();var r=this.actions,i=_(r,de)&&!ye[de],o=_(r,ve)&&!ye[ve],u=_(r,he)&&!ye[he];if(i){var a=1===t.pointers.length,s=t.distance<2,c=t.deltaTime<250;if(a&&s&&c)return}return u&&o?void 0:i||o&&n&Yt||u&&n&Ht?this.preventSrc(e):void 0},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var me=1,ge=2,_e=4,be=8,xe=be,Te=16,Ee=32;tt.prototype={defaults:{},set:function(t){return vt(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(c(t,"recognizeWith",this))return this;var e=this.simultaneous;return t=rt(t,this),e[t.id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return c(t,"dropRecognizeWith",this)?this:(t=rt(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(c(t,"requireFailure",this))return this;var e=this.requireFail;return t=rt(t,this),x(e,t)===-1&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(c(t,"dropRequireFailure",this))return this;t=rt(t,this);var e=x(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){function e(e){n.manager.emit(e,t)}var n=this,r=this.state;r<be&&e(n.options.event+et(r)),e(n.options.event),t.additionalEvent&&e(t.additionalEvent),r>=be&&e(n.options.event+et(r))},tryEmit:function(t){return this.canEmit()?this.emit(t):void(this.state=Ee)},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(Ee|me)))return!1;t++}return!0},recognize:function(t){var e=vt({},t);return h(this.options.enable,[this,e])?(this.state&(xe|Te|Ee)&&(this.state=me),this.state=this.process(e),void(this.state&(ge|_e|be|Te)&&this.tryEmit(e))):(this.reset(),void(this.state=Ee))},process:function(t){},getTouchAction:function(){},reset:function(){}},p(it,tt,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,r=e&(ge|_e),i=this.attrTest(t);return r&&(n&Ut||!i)?e|Te:r||i?n&Dt?e|be:e&ge?e|_e:ge:Ee}}),p(ot,it,{defaults:{event:"pan",threshold:10,pointers:1,direction:Wt},getTouchAction:function(){var t=this.options.direction,e=[];return t&Yt&&e.push(ve),t&Ht&&e.push(he),e},directionTest:function(t){var e=this.options,n=!0,r=t.distance,i=t.direction,o=t.deltaX,u=t.deltaY;return i&e.direction||(e.direction&Yt?(i=0===o?Lt:o<0?Ft:zt,n=o!=this.pX,r=Math.abs(t.deltaX)):(i=0===u?Lt:u<0?Xt:qt,n=u!=this.pY,r=Math.abs(t.deltaY))),t.direction=i,n&&r>e.threshold&&i&e.direction},attrTest:function(t){return it.prototype.attrTest.call(this,t)&&(this.state&ge||!(this.state&ge)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=nt(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),p(ut,it,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[de]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&ge)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),p(at,tt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[le]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,r=t.distance<e.threshold,i=t.deltaTime>e.time;if(this._input=t,!r||!n||t.eventType&(Dt|Ut)&&!i)this.reset();else if(t.eventType&Rt)this.reset(),this._timer=s(function(){this.state=xe,this.tryEmit()},e.time,this);else if(t.eventType&Dt)return xe;return Ee},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===xe&&(t&&t.eventType&Dt?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=xt(),this.manager.emit(this.options.event,this._input)))}}),p(st,it,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[de]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&ge)}}),p(ct,it,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Yt|Ht,pointers:1},getTouchAction:function(){return ot.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&(Yt|Ht)?e=t.overallVelocity:n&Yt?e=t.overallVelocityX:n&Ht&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&n&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&bt(e)>this.options.velocity&&t.eventType&Dt},emit:function(t){var e=nt(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),p(ft,tt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[pe]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,r=t.distance<e.threshold,i=t.deltaTime<e.time;if(this.reset(),t.eventType&Rt&&0===this.count)return this.failTimeout();if(r&&i&&n){if(t.eventType!=Dt)return this.failTimeout();var o=!this.pTime||t.timeStamp-this.pTime<e.interval,u=!this.pCenter||U(this.pCenter,t.center)<e.posThreshold;this.pTime=t.timeStamp,this.pCenter=t.center,u&&o?this.count+=1:this.count=1,this._input=t;var a=this.count%e.taps;if(0===a)return this.hasRequireFailures()?(this._timer=s(function(){this.state=xe,this.tryEmit()},e.interval,this),ge):xe}return Ee},failTimeout:function(){return this._timer=s(function(){this.state=Ee},this.options.interval,this),Ee},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==xe&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),lt.VERSION="2.0.7",lt.defaults={domEvents:!1,touchAction:fe,enable:!0,inputTarget:null,inputClass:null,preset:[[st,{enable:!1}],[ut,{enable:!1},["rotate"]],[ct,{direction:Yt}],[ot,{direction:Yt},["swipe"]],[ft],[ft,{event:"doubletap",taps:2},["tap"]],[at]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var we=1,Oe=2;pt.prototype={set:function(t){return vt(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?Oe:we},recognize:function(t){var e=this.session;if(!e.stopped){this.touchAction.preventDefaults(t);var n,r=this.recognizers,i=e.curRecognizer;(!i||i&&i.state&xe)&&(i=e.curRecognizer=null);for(var o=0;o<r.length;)n=r[o],e.stopped===Oe||i&&n!=i&&!n.canRecognizeWith(i)?n.reset():n.recognize(t),!i&&n.state&(ge|_e|be)&&(i=e.curRecognizer=n),o++}},get:function(t){if(t instanceof tt)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(c(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(c(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,n=x(e,t);n!==-1&&(e.splice(n,1),this.touchAction.update())}return this},on:function(t,e){if(t!==a&&e!==a){var n=this.handlers;return f(b(t),function(t){n[t]=n[t]||[],n[t].push(e)}),this}},off:function(t,e){if(t!==a){var n=this.handlers;return f(b(t),function(t){e?n[t]&&n[t].splice(x(n[t],e),1):delete n[t]}),this}},emit:function(t,e){this.options.domEvents&&ht(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var r=0;r<n.length;)n[r](e),r++}},destroy:function(){this.element&&dt(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},vt(lt,{INPUT_START:Rt,INPUT_MOVE:kt,INPUT_END:Dt,INPUT_CANCEL:Ut,STATE_POSSIBLE:me,STATE_BEGAN:ge,STATE_CHANGED:_e,STATE_ENDED:be,STATE_RECOGNIZED:xe,STATE_CANCELLED:Te,STATE_FAILED:Ee,DIRECTION_NONE:Lt,DIRECTION_LEFT:Ft,DIRECTION_RIGHT:zt,DIRECTION_UP:Xt,DIRECTION_DOWN:qt,DIRECTION_HORIZONTAL:Yt,DIRECTION_VERTICAL:Ht,DIRECTION_ALL:Wt,Manager:pt,Input:j,TouchAction:K,TouchInput:W,MouseInput:X,PointerEventInput:q,TouchMouseInput:B,SingleTouchInput:Y,Recognizer:tt,AttrRecognizer:it,Tap:ft,Pan:ot,Swipe:ct,Pinch:ut,Rotate:st,Press:at,on:y,off:m,each:f,merge:Et,extend:Tt,assign:vt,inherit:p,bindFn:d,prefixed:w});var Se="undefined"!=typeof i?i:"undefined"!=typeof self?self:{};Se.Hammer=lt,r=function(){return lt}.call(e,n,e,t),!(r!==a&&(t.exports=r))}(window,document,"Hammer")},function(t,e,n){var r,i,o;!function(n){i=[],r=n,o="function"==typeof r?r.apply(e,i):r,!(void 0!==o&&(t.exports=o))}(function(){var t=null;return function e(n,r){function i(t){return t.match(/[^ ]+/g)}function o(e){if("hammer.input"!==e.type){if(e.srcEvent._handled||(e.srcEvent._handled={}),e.srcEvent._handled[e.type])return;e.srcEvent._handled[e.type]=!0}var n=!1;e.stopPropagation=function(){n=!0};var r=e.srcEvent.stopPropagation.bind(e.srcEvent);"function"==typeof r&&(e.srcEvent.stopPropagation=function(){r(),e.stopPropagation()}),e.firstTarget=t;for(var i=t;i&&!n;){var o=i.hammer;if(o)for(var u,a=0;a<o.length;a++)if(u=o[a]._handlers[e.type])for(var s=0;s<u.length&&!n;s++)u[s](e);i=i.parentNode}}var u=r||{preventDefault:!1};if(n.Manager){var a=n,s=function(t,n){var r=Object.create(u);return n&&a.assign(r,n),e(new a(t,r),r)};return a.assign(s,a),s.Manager=function(t,n){var r=Object.create(u);return n&&a.assign(r,n),e(new a.Manager(t,r),r)},s}var c=Object.create(n),f=n.element;return f.hammer||(f.hammer=[]),f.hammer.push(c),n.on("hammer.input",function(e){u.preventDefault!==!0&&u.preventDefault!==e.pointerType||e.preventDefault(),e.isFirst&&(t=e.target)}),c._handlers={},c.on=function(t,e){return i(t).forEach(function(t){var r=c._handlers[t];r||(c._handlers[t]=r=[],n.on(t,o)),r.push(e)}),c},c.off=function(t,e){return i(t).forEach(function(t){var r=c._handlers[t];r&&(r=e?r.filter(function(t){return t!==e}):[],r.length>0?c._handlers[t]=r:(n.off(t,o),delete c._handlers[t]))}),c},c.emit=function(e,r){t=r.target,n.emit(e,r)},c.destroy=function(){var t=n.element.hammer,e=t.indexOf(c);e!==-1&&t.splice(e,1),t.length||delete n.element.hammer,c._handlers={},n.destroy()},c}})},function(t,e,n){var r=n(133);"string"==typeof r&&(r=[[t.id,r,""]]);var i=n(135)(r,{});r.locals&&(t.exports=r.locals),r.locals||t.hot.accept(133,function(){var e=n(133);"string"==typeof e&&(e=[[t.id,e,""]]),i(e)}),t.hot.dispose(function(){i()})},function(t,e,n){e=t.exports=n(134)(),e.push([t.id,"._curve-editor_1vq6l_4{position:fixed;left:0;top:0;width:403px;height:378px;border-radius:12px;background:rgba(58,8,58,.85);z-index:100;box-shadow:2px 2px 2px rgba(0,0,0,.38)}._curve-editor__left_1vq6l_1{position:absolute;width:42px;left:0;top:0;bottom:0;padding:10px}._curve-editor__left_1vq6l_1 icon-divider{margin:10px auto}._curve-editor__right_1vq6l_1{position:absolute;left:43px;top:0;right:0;bottom:0}._curve-editor__right_1vq6l_1 resize-handle{position:absolute}._curve-editor__right_1vq6l_1 resize-handle[type=top]{top:-16px}._curve-editor__right_1vq6l_1 resize-handle[type=bottom]{bottom:0}._curve-editor__right_1vq6l_1 resize-handle[type=bottom],._curve-editor__right_1vq6l_1 resize-handle[type=top]{left:50%;margin-left:-21px}._curve-editor__right_1vq6l_1 resize-handle[type=right]{right:-16px;top:50%;margin-top:-16px}._curve-editor__anchor-buttons_1vq6l_1{margin-top:10px}._curve-editor__anchor-buttons_1vq6l_1 icon-button{margin-bottom:5px}._curve-editor__mojs-logo_1vq6l_1{position:absolute;bottom:17px;left:50%;margin-left:1px;-webkit-transform:translateX(-50%);transform:translateX(-50%)}._curve-editor__mojs-logo_1vq6l_1 icon{fill:#ff512f;width:12px;height:12px}",""])},function(t,e){t.exports=function(){var t=[];return t.toString=function(){for(var t=[],e=0;e<this.length;e++){var n=this[e];n[2]?t.push("@media "+n[2]+"{"+n[1]+"}"):t.push(n[1])}return t.join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var u=e[i];"number"==typeof u[0]&&r[u[0]]||(n&&!u[2]?u[2]=n:n&&(u[2]="("+u[2]+") and ("+n+")"),t.push(u))}},t}},function(t,e,n){function r(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=d[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(c(r.parts[o],e))}else{for(var u=[],o=0;o<r.parts.length;o++)u.push(c(r.parts[o],e));d[r.id]={id:r.id,refs:1,parts:u}}}}function i(t){for(var e=[],n={},r=0;r<t.length;r++){var i=t[r],o=i[0],u=i[1],a=i[2],s=i[3],c={css:u,media:a,sourceMap:s};n[o]?n[o].parts.push(c):e.push(n[o]={id:o,parts:[c]})}return e}function o(t,e){var n=y(),r=_[_.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),_.push(e);else{if("bottom"!==t.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(e)}}function u(t){t.parentNode.removeChild(t);var e=_.indexOf(t);e>=0&&_.splice(e,1)}function a(t){var e=document.createElement("style");return e.type="text/css",o(t,e),e}function s(t){var e=document.createElement("link");return e.rel="stylesheet",o(t,e),e}function c(t,e){var n,r,i;if(e.singleton){var o=g++;n=m||(m=a(e)),r=f.bind(null,n,o,!1),i=f.bind(null,n,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=s(e),r=p.bind(null,n),i=function(){u(n),n.href&&URL.revokeObjectURL(n.href)}):(n=a(e),r=l.bind(null,n),i=function(){u(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}function f(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(e,i);else{var o=document.createTextNode(i),u=t.childNodes;u[e]&&t.removeChild(u[e]),u.length?t.insertBefore(o,u[e]):t.appendChild(o)}}function l(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function p(t,e){var n=e.css,r=e.sourceMap;r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var i=new Blob([n],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(i),o&&URL.revokeObjectURL(o)}var d={},h=function(t){var e;return function(){return"undefined"==typeof e&&(e=t.apply(this,arguments)),e}},v=h(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),y=h(function(){return document.head||document.getElementsByTagName("head")[0]}),m=null,g=0,_=[];t.exports=function(t,e){e=e||{},"undefined"==typeof e.singleton&&(e.singleton=v()),"undefined"==typeof e.insertAt&&(e.insertAt="bottom");var n=i(t);return r(n,e),function(t){for(var o=[],u=0;u<n.length;u++){var a=n[u],s=d[a.id];s.refs--,o.push(s)}if(t){var c=i(t);r(c,e)}for(var u=0;u<o.length;u++){var s=o[u];if(0===s.refs){for(var f=0;f<s.parts.length;f++)s.parts[f]();delete d[s.id]}}}};var b=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}()},function(t,e){t.exports={"curve-editor":"_curve-editor_1vq6l_4","curve-editor__left":"_curve-editor__left_1vq6l_1","curve-editor__right":"_curve-editor__right_1vq6l_1","curve-editor__anchor-buttons":"_curve-editor__anchor-buttons_1vq6l_1","curve-editor__mojs-logo":"_curve-editor__mojs-logo_1vq6l_1"}},function(t,e,n){var r=n(138);"string"==typeof r&&(r=[[t.id,r,""]]);var i=n(135)(r,{});r.locals&&(t.exports=r.locals),r.locals||t.hot.accept(138,function(){var e=n(138);"string"==typeof e&&(e=[[t.id,e,""]]),i(e)}),t.hot.dispose(function(){i()})},function(t,e,n){e=t.exports=n(134)(),e.push([t.id,"body,html{margin:0;padding:0;background:#fff5e4}*{box-sizing:border-box}",""])},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var i=n(116),o=r(i),u=o["default"].CURVE_SIZE,a=function(t){var e=arguments.length<=1||void 0===arguments[1]?1:arguments[1],n=Math.abs(t%u),r=parseInt(t/u),i=15;return n<i?t=r*u:n>u-i&&(t=e*(r+1)*u),t};e["default"]=a}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,